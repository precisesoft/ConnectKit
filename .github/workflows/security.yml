name: Security Testing (Disabled)

# Temporarily disabled - using minimal CI first
on:
  workflow_dispatch:
  # push:
  #   branches: [main, develop]
  # pull_request:
  #   branches: [main, develop]
  schedule:
    # Run security scans daily at 1 AM UTC
    - cron: "0 1 * * *"

env:
  NODE_VERSION: "18"

jobs:
  # Static Application Security Testing (SAST)
  # NOTE: CodeQL requires GitHub Advanced Security - commented out for public/free repositories
  # codeql-analysis:
  #   name: CodeQL Analysis
  #   runs-on: ubuntu-latest
  #   permissions:
  #     actions: read
  #     contents: read
  #     security-events: write
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       language: ['javascript', 'typescript']
  #
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4
  #
  #     - name: Initialize CodeQL
  #       uses: github/codeql-action/init@v3
  #       with:
  #         languages: ${{ matrix.language }}
  #         queries: security-extended,security-and-quality
  #
  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: ${{ env.NODE_VERSION }}
  #         cache: 'npm'
  #
  #     - name: Install dependencies
  #       run: |
  #         cd frontend && npm install
  #         cd ../backend && npm install
  #
  #     - name: Build applications
  #       run: |
  #         cd frontend && npm run build
  #         cd ../backend && npm run build
  #
  #     - name: Perform CodeQL Analysis
  #       uses: github/codeql-action/analyze@v3
  #       with:
  #         category: "/language:${{matrix.language}}"

  # Dependency vulnerability scanning
  dependency-scan:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Run npm audit (Frontend)
        run: |
          npm install
          npm install --workspace=frontend
          npm audit --workspace=frontend --audit-level=moderate --production || echo "Found vulnerabilities - check report"
          npm audit --workspace=frontend --json --production > npm-audit-frontend.json || true

      - name: Run npm audit (Backend)
        run: |
          npm install --workspace=backend
          npm audit --workspace=backend --audit-level=moderate --production || echo "Found vulnerabilities - check report"
          npm audit --workspace=backend --json --production > npm-audit-backend.json || true

      - name: Upload dependency scan results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dependency-scan-results
          path: |
            frontend/npm-audit-frontend.json
            backend/npm-audit-backend.json

      - name: Check for critical vulnerabilities
        run: |
          echo "## Security Vulnerability Summary" >> $GITHUB_STEP_SUMMARY

          # Check frontend vulnerabilities
          if [ -f "frontend/npm-audit-frontend.json" ]; then
            FRONTEND_CRITICAL=$(jq '.vulnerabilities | to_entries | map(select(.value.severity == "critical")) | length' frontend/npm-audit-frontend.json)
            FRONTEND_HIGH=$(jq '.vulnerabilities | to_entries | map(select(.value.severity == "high")) | length' frontend/npm-audit-frontend.json)
            echo "**Frontend:** $FRONTEND_CRITICAL critical, $FRONTEND_HIGH high severity vulnerabilities" >> $GITHUB_STEP_SUMMARY
            
            if [ "$FRONTEND_CRITICAL" != "0" ]; then
              echo "❌ Critical vulnerabilities found in frontend dependencies!"
              exit 1
            fi
          fi

          # Check backend vulnerabilities
          if [ -f "backend/npm-audit-backend.json" ]; then
            BACKEND_CRITICAL=$(jq '.vulnerabilities | to_entries | map(select(.value.severity == "critical")) | length' backend/npm-audit-backend.json)
            BACKEND_HIGH=$(jq '.vulnerabilities | to_entries | map(select(.value.severity == "high")) | length' backend/npm-audit-backend.json)
            echo "**Backend:** $BACKEND_CRITICAL critical, $BACKEND_HIGH high severity vulnerabilities" >> $GITHUB_STEP_SUMMARY
            
            if [ "$BACKEND_CRITICAL" != "0" ]; then
              echo "❌ Critical vulnerabilities found in backend dependencies!"
              exit 1
            fi
          fi

          echo "✅ No critical vulnerabilities found in dependencies" >> $GITHUB_STEP_SUMMARY

  # Container security scanning
  container-security:
    name: Container Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Build Docker images
        run: |
          docker build -t connectkit-backend:security-test -f docker/backend/Dockerfile ./backend
          docker build -t connectkit-frontend:security-test -f docker/frontend/Dockerfile ./frontend

      - name: Run Trivy vulnerability scanner (Backend)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "connectkit-backend:security-test"
          format: "sarif"
          output: "trivy-backend-results.sarif"

      - name: Run Trivy vulnerability scanner (Frontend)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "connectkit-frontend:security-test"
          format: "sarif"
          output: "trivy-frontend-results.sarif"

      # NOTE: SARIF upload requires GitHub Advanced Security - commented out for public/free repositories
      # - name: Upload Trivy scan results to GitHub Security tab
      #   uses: github/codeql-action/upload-sarif@v3
      #   if: always()
      #   with:
      #     sarif_file: '.'

      - name: Run Trivy vulnerability scanner (Table format)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "connectkit-backend:security-test"
          format: "table"
          exit-code: "1"
          ignore-unfixed: true
          vuln-type: "os,library"
          severity: "CRITICAL,HIGH"

  # NOTE: Secret detection tools disabled - GitLeaks requires organization license
  # Re-enable when proper licensing is available
  # secret-scan:
  #   name: Secret Detection
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0
  #
  #     - name: Run GitLeaks
  #       uses: gitleaks/gitleaks-action@v2
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #         GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE}}
  #
  #     - name: Run TruffleHog
  #       uses: trufflesecurity/trufflehog@main
  #       with:
  #         path: ./
  #         base: main
  #         head: HEAD
  #         extra_args: --debug --only-verified

  # Frontend security testing
  frontend-security:
    name: Frontend Security Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: |
          npm install
          npm install --workspace=frontend

      - name: Build frontend
        working-directory: ./frontend
        run: npm run build

      - name: Run ESLint security plugin
        working-directory: ./frontend
        run: |
          # Check if security plugin is installed
          if npm list eslint-plugin-security; then
            npm run lint -- --format=json --output-file=eslint-security-results.json || true
          else
            echo "ESLint security plugin not installed, skipping"
          fi

      - name: Analyze bundle for security issues
        working-directory: ./frontend
        run: |
          # Install and run webpack-bundle-analyzer for security analysis
          npx webpack-bundle-analyzer dist/assets/*.js --report --format json --out bundle-analysis.json || true

      - name: Check for sensitive data in build
        working-directory: ./frontend/dist
        run: |
          echo "## Frontend Security Scan Results" >> $GITHUB_STEP_SUMMARY

          # Check for potential secrets in build files
          if grep -r -i "password\|secret\|key\|token" . --include="*.js" --include="*.css" | grep -v "node_modules"; then
            echo "⚠️ Potential sensitive data found in build files:" >> $GITHUB_STEP_SUMMARY
            grep -r -i "password\|secret\|key\|token" . --include="*.js" --include="*.css" | head -5 >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ No sensitive data found in build files" >> $GITHUB_STEP_SUMMARY
          fi

          # Check file permissions
          find . -type f -perm /077 | head -10 || echo "✅ File permissions look secure"

      - name: Upload frontend security results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: frontend-security-results
          path: |
            frontend/eslint-security-results.json
            frontend/bundle-analysis.json

  # Backend security testing
  backend-security:
    name: Backend Security Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: test_security
          POSTGRES_PASSWORD: test_security
          POSTGRES_DB: connectkit_security_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: |
          npm install
          npm install --workspace=backend

      - name: Run ESLint security plugin
        working-directory: ./backend
        run: |
          # Check if security plugin is installed
          if npm list eslint-plugin-security; then
            npm run lint -- --format=json --output-file=eslint-security-results.json || true
          else
            echo "ESLint security plugin not installed, skipping"
          fi

      - name: Run custom security tests
        working-directory: ./backend
        env:
          NODE_ENV: test
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USER: test_security
          DB_PASSWORD: test_security
          DB_NAME: connectkit_security_test
          JWT_SECRET: test-security-secret-key
          JWT_REFRESH_SECRET: test-security-refresh-key
          ENCRYPTION_KEY: test-security-encryption-key-32ch
        run: |
          # Run database migrations
          npm run db:migrate || echo "Migration failed, continuing..."

          # Run security-focused tests if they exist
          if [ -f "src/tests/security" ]; then
            npm run test:security || echo "No security tests found"
          fi

          # Test for SQL injection vulnerabilities
          npm run test -- --testPathPattern=security || echo "No security test pattern found"

      - name: Check for hardcoded secrets
        working-directory: ./backend
        run: |
          echo "## Backend Security Scan Results" >> $GITHUB_STEP_SUMMARY

          # Check for hardcoded secrets (excluding test files)
          if grep -r -E "(password|secret|key|token)\s*[:=]\s*['\"][^'\"]*['\"]" src/ --include="*.ts" --include="*.js" --exclude-dir="tests" --exclude-dir="__tests__" | grep -v -E "(test|mock|example|placeholder)"; then
            echo "⚠️ Potential hardcoded secrets found:" >> $GITHUB_STEP_SUMMARY
            echo "Please review and move to environment variables" >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ No hardcoded secrets found" >> $GITHUB_STEP_SUMMARY
          fi

          # Check for console.log statements in production code
          if find src/ -name "*.ts" -not -path "*/tests/*" -not -path "*/__tests__/*" -exec grep -l "console\." {} \;; then
            echo "⚠️ Console statements found - should be removed for production" >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ No console statements found in production code" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload backend security results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: backend-security-results
          path: |
            backend/eslint-security-results.json

  # OWASP ZAP security testing
  owasp-zap:
    name: OWASP ZAP Security Test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4

      - name: Start application services
        run: |
          cp .env.example .env
          echo "JWT_SECRET=test-jwt-secret-for-security-testing" >> .env
          docker compose up -d
          sleep 45

      - name: Wait for services
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:3001/api/health; do sleep 2; done'
          timeout 60 bash -c 'until curl -f http://localhost:3000; do sleep 2; done'

      - name: Run OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.10.0
        with:
          target: "http://localhost:3000"
          rules_file_name: ".zap/rules.tsv"
          cmd_options: "-a -d -T 15 -m 5"

      - name: Run OWASP ZAP API Scan
        uses: zaproxy/action-api-scan@v0.6.0
        with:
          target: "http://localhost:3001/api"
          format: openapi
          cmd_options: "-a -d -T 10 -l INFO"

      - name: Upload ZAP results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: owasp-zap-results
          path: |
            report_html.html
            report_json.json

      - name: Stop services
        if: always()
        run: docker compose down -v

  # Security headers and configuration testing
  security-headers:
    name: Security Headers Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Start application services
        run: |
          cp .env.example .env
          docker compose up -d
          sleep 30

      - name: Wait for services
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:3001/api/health; do sleep 2; done'
          timeout 60 bash -c 'until curl -f http://localhost:3000; do sleep 2; done'

      - name: Test security headers
        run: |
          echo "## Security Headers Analysis" >> $GITHUB_STEP_SUMMARY

          # Test backend security headers
          echo "### Backend API Security Headers" >> $GITHUB_STEP_SUMMARY
          BACKEND_HEADERS=$(curl -I http://localhost:3001/api/health 2>/dev/null)

          # Check for required security headers
          if echo "$BACKEND_HEADERS" | grep -i "x-content-type-options: nosniff"; then
            echo "✅ X-Content-Type-Options: nosniff" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Missing X-Content-Type-Options header" >> $GITHUB_STEP_SUMMARY
          fi

          if echo "$BACKEND_HEADERS" | grep -i "x-frame-options"; then
            echo "✅ X-Frame-Options present" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Missing X-Frame-Options header" >> $GITHUB_STEP_SUMMARY
          fi

          if echo "$BACKEND_HEADERS" | grep -i "strict-transport-security"; then
            echo "✅ Strict-Transport-Security present" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ Missing HSTS header (expected in production)" >> $GITHUB_STEP_SUMMARY
          fi

          # Test frontend security headers
          echo "### Frontend Security Headers" >> $GITHUB_STEP_SUMMARY
          FRONTEND_HEADERS=$(curl -I http://localhost:3000 2>/dev/null)

          if echo "$FRONTEND_HEADERS" | grep -i "content-security-policy"; then
            echo "✅ Content-Security-Policy present" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ Missing Content-Security-Policy header" >> $GITHUB_STEP_SUMMARY
          fi

          # Check for information disclosure
          echo "### Information Disclosure Check" >> $GITHUB_STEP_SUMMARY
          if echo "$BACKEND_HEADERS$FRONTEND_HEADERS" | grep -i "server:"; then
            echo "⚠️ Server header present - consider removing" >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ No server information disclosed" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Test CORS configuration
        run: |
          echo "### CORS Configuration Test" >> $GITHUB_STEP_SUMMARY

          # Test CORS preflight
          CORS_RESPONSE=$(curl -H "Origin: http://malicious.example.com" \
            -H "Access-Control-Request-Method: POST" \
            -H "Access-Control-Request-Headers: X-Requested-With" \
            -X OPTIONS http://localhost:3001/api/contacts 2>/dev/null)

          if echo "$CORS_RESPONSE" | grep -i "access-control-allow-origin: \*"; then
            echo "❌ CORS allows all origins - security risk!" >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ CORS properly configured" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Test rate limiting
        run: |
          echo "### Rate Limiting Test" >> $GITHUB_STEP_SUMMARY

          # Test rate limiting with rapid requests
          for i in {1..15}; do
            curl -s -o /dev/null -w "%{http_code}\n" http://localhost:3001/api/health
          done | tail -5 > rate_limit_test.txt

          if grep -q "429" rate_limit_test.txt; then
            echo "✅ Rate limiting is active" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ Rate limiting not detected" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Stop services
        if: always()
        run: docker compose down -v

  # Security test report consolidation
  security-report:
    name: Security Report
    runs-on: ubuntu-latest
    needs:
      [dependency-scan, container-security, frontend-security, backend-security]
    if: always()
    steps:
      - name: Download all security artifacts
        uses: actions/download-artifact@v4
        with:
          path: security-results/

      - name: Generate security summary report
        run: |
          echo "# 🔒 Security Testing Report" > security-summary.md
          echo "" >> security-summary.md
          echo "## Test Results Summary" >> security-summary.md
          echo "" >> security-summary.md

          # Check job results
          # CodeQL Analysis commented out - requires GitHub Advanced Security
          echo "ℹ️ **CodeQL Analysis**: Skipped (requires GitHub Advanced Security)" >> security-summary.md

          if [ "${{ needs.dependency-scan.result }}" == "success" ]; then
            echo "✅ **Dependency Scan**: No critical vulnerabilities" >> security-summary.md
          else
            echo "❌ **Dependency Scan**: Critical vulnerabilities found" >> security-summary.md
          fi

          if [ "${{ needs.container-security.result }}" == "success" ]; then
            echo "✅ **Container Security**: Passed" >> security-summary.md
          else
            echo "❌ **Container Security**: Vulnerabilities found" >> security-summary.md
          fi

          echo "⚠️ **Secret Detection**: Disabled (requires organization license)" >> security-summary.md

          echo "" >> security-summary.md
          echo "## Recommendations" >> security-summary.md
          echo "" >> security-summary.md
          echo "- Regular security updates for all dependencies" >> security-summary.md
          echo "- Implement proper secret management" >> security-summary.md
          echo "- Regular security header audits" >> security-summary.md
          echo "- Continuous monitoring for vulnerabilities" >> security-summary.md

          cat security-summary.md >> $GITHUB_STEP_SUMMARY

      - name: Upload consolidated security report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: |
            security-summary.md
            security-results/
