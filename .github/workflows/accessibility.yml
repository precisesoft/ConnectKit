name: Accessibility Testing

on:
  pull_request:
    branches: [main, develop]
  push:
    branches: [main]
  schedule:
    # Run accessibility tests daily at 3 AM UTC
    - cron: "0 3 * * *"
  workflow_dispatch:

env:
  NODE_VERSION: "18"

jobs:
  # Lighthouse Accessibility Audit
  lighthouse-a11y:
    name: Lighthouse Accessibility
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: "package-lock.json"

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Build frontend
        working-directory: ./frontend
        run: npm run build

      - name: Start services
        run: |
          cp .env.example .env
          docker-compose up -d
          sleep 30

      - name: Wait for services
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:3001/api/health; do sleep 2; done'
          timeout 60 bash -c 'until curl -f http://localhost:3000; do sleep 2; done'

      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli@0.12.x

      - name: Run Lighthouse Accessibility Tests
        run: |
          # Configure Lighthouse for accessibility focus
          cat > lighthouserc-a11y.json << EOF
          {
            "ci": {
              "collect": {
                "numberOfRuns": 3,
                "url": [
                  "http://localhost:3000",
                  "http://localhost:3000/login",
                  "http://localhost:3000/register",
                  "http://localhost:3000/contacts"
                ],
                "settings": {
                  "onlyCategories": ["accessibility"],
                  "chromeFlags": ["--no-sandbox", "--headless"]
                }
              },
              "assert": {
                "assertions": {
                  "categories:accessibility": ["error", {"minScore": 0.9}],
                  "categories:best-practices": ["error", {"minScore": 0.9}]
                }
              }
            }
          }
          EOF

          lhci collect --config=lighthouserc-a11y.json
          lhci assert --config=lighthouserc-a11y.json

      - name: Parse Lighthouse Results
        if: always()
        run: |
          echo "## Lighthouse Accessibility Results" >> $GITHUB_STEP_SUMMARY

          if [ -d ".lighthouseci" ]; then
            for file in .lighthouseci/lhr-*.json; do
              if [ -f "$file" ]; then
                URL=$(jq -r '.finalUrl' "$file")
                SCORE=$(jq -r '.categories.accessibility.score' "$file")
                SCORE_PERCENT=$(echo "$SCORE * 100" | bc)
                
                echo "### $URL" >> $GITHUB_STEP_SUMMARY
                echo "**Accessibility Score:** ${SCORE_PERCENT}%" >> $GITHUB_STEP_SUMMARY
                
                # Extract accessibility violations
                jq -r '.audits | to_entries[] | select(.value.score != null and .value.score < 1) | select(.key | contains("accessibility") or contains("color-contrast") or contains("aria") or contains("tabindex") or contains("label") or contains("heading")) | "- " + .value.title + " (Score: " + (.value.score | tostring) + ")"' "$file" >> $GITHUB_STEP_SUMMARY || true
                echo "" >> $GITHUB_STEP_SUMMARY
              fi
            done
          fi

      - name: Upload Lighthouse results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-accessibility-results
          path: .lighthouseci/

      - name: Stop services
        if: always()
        run: docker-compose down -v

  # Axe-core automated accessibility testing
  axe-core-tests:
    name: Axe-core A11y Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: "package-lock.json"

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Install Playwright and axe-playwright
        working-directory: ./frontend
        run: |
          npm install --save-dev @playwright/test axe-playwright
          npx playwright install

      - name: Start services
        run: |
          cp .env.example .env
          docker-compose up -d
          sleep 30

      - name: Wait for services
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:3000; do sleep 2; done'

      - name: Create Axe accessibility tests
        working-directory: ./frontend
        run: |
          mkdir -p tests/accessibility

          cat > tests/accessibility/axe.spec.ts << 'EOF'
          import { test, expect } from '@playwright/test';
          import AxeBuilder from '@axe-core/playwright';

          const pages = [
            { name: 'Home', url: '/' },
            { name: 'Login', url: '/login' },
            { name: 'Register', url: '/register' },
          ];

          pages.forEach(({ name, url }) => {
            test(`${name} page should not have accessibility violations`, async ({ page }) => {
              await page.goto(`http://localhost:3000${url}`);
              
              // Wait for page to load
              await page.waitForLoadState('networkidle');
              
              const accessibilityScanResults = await new AxeBuilder({ page })
                .withTags(['wcag2a', 'wcag2aa', 'wcag21aa'])
                .exclude('#ads') // Exclude third-party content
                .analyze();
              
              expect(accessibilityScanResults.violations).toEqual([]);
            });
          });

          test('Contact form should be accessible', async ({ page }) => {
            await page.goto('http://localhost:3000/login');
            
            // Fill login form (this would need valid test credentials)
            // For now, just test the form structure
            await page.waitForLoadState('networkidle');
            
            const accessibilityScanResults = await new AxeBuilder({ page })
              .include('form')
              .withTags(['wcag2a', 'wcag2aa', 'wcag21aa'])
              .analyze();
              
            expect(accessibilityScanResults.violations).toEqual([]);
          });

          test('Navigation should be keyboard accessible', async ({ page }) => {
            await page.goto('http://localhost:3000/');
            await page.waitForLoadState('networkidle');
            
            // Test keyboard navigation
            await page.keyboard.press('Tab');
            const focusedElement = await page.locator(':focus').first();
            expect(await focusedElement.isVisible()).toBe(true);
            
            // Run accessibility scan on navigation
            const accessibilityScanResults = await new AxeBuilder({ page })
              .include('[role="navigation"], nav, header')
              .withTags(['wcag2a', 'wcag2aa'])
              .analyze();
              
            expect(accessibilityScanResults.violations).toEqual([]);
          });
          EOF

      - name: Run Axe accessibility tests
        working-directory: ./frontend
        run: |
          npx playwright test tests/accessibility/axe.spec.ts --reporter=html --output-dir=accessibility-results
        continue-on-error: true

      - name: Upload Axe test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: axe-accessibility-results
          path: |
            frontend/accessibility-results/
            frontend/test-results/

      - name: Stop services
        if: always()
        run: docker-compose down -v

  # WAVE (Web Accessibility Evaluation Tool) testing
  wave-testing:
    name: WAVE Accessibility Testing
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: "package-lock.json"

      - name: Start services
        run: |
          cp .env.example .env
          docker-compose up -d
          sleep 30

      - name: Wait for services
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:3000; do sleep 2; done'

      - name: Install WAVE CLI (alternative implementation)
        run: |
          # Install puppeteer for web scraping WAVE results
          npm install -g puppeteer

          # Create WAVE testing script
          cat > wave-test.js << 'EOF'
          const puppeteer = require('puppeteer');
          const fs = require('fs');

          async function testAccessibility() {
            const browser = await puppeteer.launch({ 
              headless: true,
              args: ['--no-sandbox', '--disable-setuid-sandbox']
            });
            
            const page = await browser.newPage();
            const results = {};
            
            const urls = [
              'http://localhost:3000',
              'http://localhost:3000/login',
              'http://localhost:3000/register'
            ];
            
            for (const url of urls) {
              try {
                console.log(`Testing: ${url}`);
                await page.goto(url, { waitUntil: 'networkidle2' });
                
                // Basic accessibility checks
                const title = await page.title();
                const hasH1 = await page.$('h1') !== null;
                const images = await page.$$eval('img', imgs => 
                  imgs.map(img => ({ src: img.src, alt: img.alt }))
                );
                const imagesWithoutAlt = images.filter(img => !img.alt || img.alt.trim() === '');
                
                // Check for form labels
                const formsWithoutLabels = await page.$$eval('input, select, textarea', inputs => 
                  inputs.filter(input => {
                    const id = input.id;
                    const name = input.name;
                    if (!id && !name) return true;
                    const label = document.querySelector(`label[for="${id}"]`) || 
                                 document.querySelector(`label[for="${name}"]`) ||
                                 input.closest('label');
                    return !label && input.type !== 'hidden' && input.type !== 'submit';
                  }).length
                );
                
                // Check for headings structure
                const headings = await page.$$eval('h1, h2, h3, h4, h5, h6', headings =>
                  headings.map(h => ({ level: parseInt(h.tagName[1]), text: h.textContent.trim() }))
                );
                
                results[url] = {
                  title: title,
                  hasH1: hasH1,
                  imagesWithoutAlt: imagesWithoutAlt.length,
                  formsWithoutLabels: formsWithoutLabels,
                  headingsCount: headings.length,
                  headings: headings
                };
                
              } catch (error) {
                console.error(`Error testing ${url}:`, error.message);
                results[url] = { error: error.message };
              }
            }
            
            await browser.close();
            return results;
          }

          testAccessibility().then(results => {
            console.log('\n=== WAVE-style Accessibility Results ===');
            fs.writeFileSync('wave-results.json', JSON.stringify(results, null, 2));
            
            for (const [url, data] of Object.entries(results)) {
              console.log(`\n${url}:`);
              if (data.error) {
                console.log(`  ❌ Error: ${data.error}`);
              } else {
                console.log(`  📄 Title: ${data.title || 'Missing'}`);
                console.log(`  📊 H1 Present: ${data.hasH1 ? '✅' : '❌'}`);
                console.log(`  🖼️  Images without alt: ${data.imagesWithoutAlt}`);
                console.log(`  📝 Forms without labels: ${data.formsWithoutLabels}`);
                console.log(`  📋 Headings count: ${data.headingsCount}`);
              }
            }
          }).catch(console.error);
          EOF

      - name: Run WAVE-style accessibility tests
        run: |
          node wave-test.js
        continue-on-error: true

      - name: Parse WAVE results for GitHub
        if: always()
        run: |
          echo "## WAVE-style Accessibility Analysis" >> $GITHUB_STEP_SUMMARY

          if [ -f "wave-results.json" ]; then
            # Parse results and add to summary
            node -e "
              const results = JSON.parse(require('fs').readFileSync('wave-results.json', 'utf8'));
              for (const [url, data] of Object.entries(results)) {
                console.log(\`### \${url}\`);
                if (data.error) {
                  console.log(\`❌ **Error:** \${data.error}\`);
                } else {
                  console.log(\`- **Page Title:** \${data.title || 'Missing ❌'}\`);
                  console.log(\`- **H1 Present:** \${data.hasH1 ? '✅ Yes' : '❌ No'}\`);
                  console.log(\`- **Images without Alt Text:** \${data.imagesWithoutAlt} \${data.imagesWithoutAlt > 0 ? '❌' : '✅'}\`);
                  console.log(\`- **Forms without Labels:** \${data.formsWithoutLabels} \${data.formsWithoutLabels > 0 ? '❌' : '✅'}\`);
                  console.log(\`- **Heading Structure:** \${data.headingsCount} headings\`);
                }
                console.log('');
              }
            " >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload WAVE results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: wave-accessibility-results
          path: wave-results.json

      - name: Stop services
        if: always()
        run: docker-compose down -v

  # Color contrast and visual accessibility testing
  color-contrast:
    name: Color Contrast Testing
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: "package-lock.json"

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Start services
        run: |
          cp .env.example .env
          docker-compose up -d
          sleep 30

      - name: Wait for services
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:3000; do sleep 2; done'

      - name: Install color contrast testing tools
        run: |
          npm install -g puppeteer color-contrast-analyzer-cli

      - name: Create color contrast test script
        run: |
          cat > color-contrast-test.js << 'EOF'
          const puppeteer = require('puppeteer');
          const fs = require('fs');

          async function testColorContrast() {
            const browser = await puppeteer.launch({
              headless: true,
              args: ['--no-sandbox', '--disable-setuid-sandbox']
            });
            
            const page = await browser.newPage();
            const results = {};
            
            const urls = [
              'http://localhost:3000',
              'http://localhost:3000/login',
              'http://localhost:3000/register'
            ];
            
            for (const url of urls) {
              console.log(`Testing color contrast for: ${url}`);
              await page.goto(url, { waitUntil: 'networkidle2' });
              
              // Get all text elements and their computed styles
              const colorInfo = await page.evaluate(() => {
                const elements = document.querySelectorAll('*');
                const colorData = [];
                
                elements.forEach(el => {
                  const style = window.getComputedStyle(el);
                  const text = el.textContent?.trim();
                  
                  if (text && text.length > 0 && el.offsetWidth > 0 && el.offsetHeight > 0) {
                    const color = style.color;
                    const backgroundColor = style.backgroundColor;
                    const fontSize = style.fontSize;
                    
                    if (color && backgroundColor && color !== backgroundColor) {
                      colorData.push({
                        element: el.tagName.toLowerCase(),
                        text: text.substring(0, 50) + (text.length > 50 ? '...' : ''),
                        color: color,
                        backgroundColor: backgroundColor,
                        fontSize: fontSize
                      });
                    }
                  }
                });
                
                return colorData.slice(0, 20); // Limit to prevent huge output
              });
              
              results[url] = {
                totalElements: colorInfo.length,
                elements: colorInfo
              };
            }
            
            await browser.close();
            return results;
          }

          testColorContrast().then(results => {
            fs.writeFileSync('color-contrast-results.json', JSON.stringify(results, null, 2));
            console.log('Color contrast analysis completed');
          }).catch(console.error);
          EOF

      - name: Run color contrast tests
        run: |
          node color-contrast-test.js
        continue-on-error: true

      - name: Analyze color contrast results
        run: |
          echo "## Color Contrast Analysis" >> $GITHUB_STEP_SUMMARY

          if [ -f "color-contrast-results.json" ]; then
            node -e "
              const results = JSON.parse(require('fs').readFileSync('color-contrast-results.json', 'utf8'));
              
              for (const [url, data] of Object.entries(results)) {
                console.log(\`### \${url}\`);
                console.log(\`**Elements Analyzed:** \${data.totalElements}\`);
                console.log('');
                
                // Show sample of elements (first 5)
                const samples = data.elements.slice(0, 5);
                if (samples.length > 0) {
                  console.log('**Sample Elements:**');
                  samples.forEach((el, i) => {
                    console.log(\`\${i + 1}. **\${el.element}**: \${el.text}\`);
                    console.log(\`   - Color: \${el.color}\`);
                    console.log(\`   - Background: \${el.backgroundColor}\`);
                    console.log(\`   - Font Size: \${el.fontSize}\`);
                    console.log('');
                  });
                }
              }
              
              console.log('> **Note:** This is a basic color extraction. For detailed contrast ratio analysis, consider tools like axe-core or Lighthouse.');
            " >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload color contrast results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: color-contrast-results
          path: color-contrast-results.json

      - name: Stop services
        if: always()
        run: docker-compose down -v

  # Keyboard navigation testing
  keyboard-navigation:
    name: Keyboard Navigation Testing
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: "package-lock.json"

      - name: Install dependencies
        working-directory: ./frontend
        run: |
          npm ci
          npm install --save-dev @playwright/test
          npx playwright install

      - name: Start services
        run: |
          cp .env.example .env
          docker-compose up -d
          sleep 30

      - name: Wait for services
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:3000; do sleep 2; done'

      - name: Create keyboard navigation tests
        working-directory: ./frontend
        run: |
          mkdir -p tests/accessibility

          cat > tests/accessibility/keyboard-navigation.spec.ts << 'EOF'
          import { test, expect } from '@playwright/test';

          test.describe('Keyboard Navigation Tests', () => {
            test('should navigate through all focusable elements on home page', async ({ page }) => {
              await page.goto('http://localhost:3000/');
              await page.waitForLoadState('networkidle');
              
              // Get all focusable elements
              const focusableElements = await page.locator(
                'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])'
              ).all();
              
              console.log(`Found ${focusableElements.length} focusable elements`);
              
              // Test tab navigation
              let tabCount = 0;
              for (let i = 0; i < Math.min(focusableElements.length, 20); i++) {
                await page.keyboard.press('Tab');
                tabCount++;
                
                const focusedElement = page.locator(':focus').first();
                const isVisible = await focusedElement.isVisible();
                expect(isVisible).toBe(true);
                
                // Check if focused element has visible focus indicator
                const focusedElementBox = await focusedElement.boundingBox();
                expect(focusedElementBox).not.toBeNull();
              }
              
              expect(tabCount).toBeGreaterThan(0);
            });
            
            test('should handle Enter key on buttons and links', async ({ page }) => {
              await page.goto('http://localhost:3000/');
              await page.waitForLoadState('networkidle');
              
              // Find clickable elements
              const buttons = await page.locator('button:visible, a[href]:visible').all();
              
              if (buttons.length > 0) {
                const firstButton = buttons[0];
                await firstButton.focus();
                
                // Test Enter key
                const elementTag = await firstButton.evaluate(el => el.tagName.toLowerCase());
                const isDisabled = await firstButton.evaluate(el => el.disabled || el.getAttribute('aria-disabled') === 'true');
                
                if (!isDisabled && (elementTag === 'button' || elementTag === 'a')) {
                  // Just test that Enter key can be pressed without error
                  await firstButton.press('Enter');
                  // Basic test - if no error thrown, navigation works
                }
              }
            });
            
            test('should navigate login form with keyboard only', async ({ page }) => {
              await page.goto('http://localhost:3000/login');
              await page.waitForLoadState('networkidle');
              
              // Tab to first form field
              await page.keyboard.press('Tab');
              let focusedElement = page.locator(':focus').first();
              
              // Should be able to type in focused element
              if (await focusedElement.inputValue !== undefined) {
                await focusedElement.type('test@example.com');
                expect(await focusedElement.inputValue()).toBe('test@example.com');
              }
              
              // Tab to next field
              await page.keyboard.press('Tab');
              focusedElement = page.locator(':focus').first();
              
              // Should be able to type in second field
              if (await focusedElement.inputValue !== undefined) {
                await focusedElement.type('password123');
                expect(await focusedElement.inputValue()).toBe('password123');
              }
              
              // Tab should reach submit button
              await page.keyboard.press('Tab');
              focusedElement = page.locator(':focus').first();
              const buttonText = await focusedElement.textContent();
              expect(buttonText?.toLowerCase()).toContain('login');
            });
            
            test('should support Escape key to close modals/dialogs', async ({ page }) => {
              await page.goto('http://localhost:3000/');
              await page.waitForLoadState('networkidle');
              
              // Look for elements that might open modals
              const modalTriggers = await page.locator('[aria-haspopup="dialog"], [data-toggle="modal"]').all();
              
              if (modalTriggers.length > 0) {
                await modalTriggers[0].click();
                
                // Wait a bit for modal to potentially open
                await page.waitForTimeout(500);
                
                // Press Escape
                await page.keyboard.press('Escape');
                
                // Modal should be closed (this is a basic test)
                // In a real app, you'd check for specific modal close behavior
              }
            });
            
            test('should have proper skip links', async ({ page }) => {
              await page.goto('http://localhost:3000/');
              await page.waitForLoadState('networkidle');
              
              // Tab to first element (should potentially be skip link)
              await page.keyboard.press('Tab');
              const firstFocusedElement = page.locator(':focus').first();
              
              const text = await firstFocusedElement.textContent();
              const href = await firstFocusedElement.getAttribute('href');
              
              // Check if first focusable element is a skip link
              if (text?.toLowerCase().includes('skip') && href?.startsWith('#')) {
                console.log('Skip link found:', text);
                
                // Test that skip link actually works
                await firstFocusedElement.press('Enter');
                
                // Check if focus moved to target
                const targetElement = page.locator(href);
                if (await targetElement.count() > 0) {
                  console.log('Skip link target exists');
                }
              }
            });
          });
          EOF

      - name: Run keyboard navigation tests
        working-directory: ./frontend
        run: |
          npx playwright test tests/accessibility/keyboard-navigation.spec.ts --reporter=html --output-dir=keyboard-test-results
        continue-on-error: true

      - name: Upload keyboard navigation results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: keyboard-navigation-results
          path: |
            frontend/keyboard-test-results/
            frontend/test-results/

      - name: Stop services
        if: always()
        run: docker-compose down -v

  # Accessibility report consolidation
  accessibility-report:
    name: Accessibility Report
    runs-on: ubuntu-latest
    needs:
      [
        lighthouse-a11y,
        axe-core-tests,
        wave-testing,
        color-contrast,
        keyboard-navigation,
      ]
    if: always()
    steps:
      - name: Download all accessibility artifacts
        uses: actions/download-artifact@v4
        with:
          path: accessibility-results/

      - name: Generate accessibility summary report
        run: |
          echo "# ♿ Accessibility Testing Report" > accessibility-summary.md
          echo "" >> accessibility-summary.md
          echo "This report consolidates accessibility testing results from multiple tools and approaches." >> accessibility-summary.md
          echo "" >> accessibility-summary.md

          echo "## Test Results Summary" >> accessibility-summary.md
          echo "" >> accessibility-summary.md

          # Check job results
          if [ "${{ needs.lighthouse-a11y.result }}" == "success" ]; then
            echo "✅ **Lighthouse Accessibility**: Passed (Score ≥ 90%)" >> accessibility-summary.md
          else
            echo "❌ **Lighthouse Accessibility**: Failed or warnings found" >> accessibility-summary.md
          fi

          if [ "${{ needs.axe-core-tests.result }}" == "success" ]; then
            echo "✅ **Axe-core Tests**: No violations detected" >> accessibility-summary.md
          else
            echo "❌ **Axe-core Tests**: Accessibility violations found" >> accessibility-summary.md
          fi

          if [ "${{ needs.wave-testing.result }}" == "success" ]; then
            echo "✅ **WAVE Analysis**: Basic accessibility checks passed" >> accessibility-summary.md
          else
            echo "⚠️ **WAVE Analysis**: Issues detected or test incomplete" >> accessibility-summary.md
          fi

          if [ "${{ needs.color-contrast.result }}" == "success" ]; then
            echo "✅ **Color Contrast**: Analysis completed" >> accessibility-summary.md
          else
            echo "⚠️ **Color Contrast**: Analysis incomplete" >> accessibility-summary.md
          fi

          if [ "${{ needs.keyboard-navigation.result }}" == "success" ]; then
            echo "✅ **Keyboard Navigation**: All tests passed" >> accessibility-summary.md
          else
            echo "❌ **Keyboard Navigation**: Issues found with keyboard accessibility" >> accessibility-summary.md
          fi

          echo "" >> accessibility-summary.md
          echo "## WCAG 2.1 Compliance Checklist" >> accessibility-summary.md
          echo "" >> accessibility-summary.md
          echo "### Level A Compliance" >> accessibility-summary.md
          echo "- [ ] Images have appropriate alt text" >> accessibility-summary.md
          echo "- [ ] Form controls have labels" >> accessibility-summary.md
          echo "- [ ] Page has proper heading structure" >> accessibility-summary.md
          echo "- [ ] Content is keyboard accessible" >> accessibility-summary.md
          echo "- [ ] No content flashes more than 3 times per second" >> accessibility-summary.md
          echo "" >> accessibility-summary.md
          echo "### Level AA Compliance" >> accessibility-summary.md
          echo "- [ ] Color contrast ratio is at least 4.5:1 for normal text" >> accessibility-summary.md
          echo "- [ ] Color contrast ratio is at least 3:1 for large text" >> accessibility-summary.md
          echo "- [ ] Page is usable at 200% zoom" >> accessibility-summary.md
          echo "- [ ] Focus is visible and logical" >> accessibility-summary.md
          echo "- [ ] Content is organized with proper headings" >> accessibility-summary.md
          echo "" >> accessibility-summary.md

          echo "## Accessibility Testing Tools Used" >> accessibility-summary.md
          echo "" >> accessibility-summary.md
          echo "1. **Google Lighthouse**: Automated accessibility auditing" >> accessibility-summary.md
          echo "2. **Axe-core**: Comprehensive accessibility rule engine" >> accessibility-summary.md
          echo "3. **WAVE-style Analysis**: Web accessibility evaluation" >> accessibility-summary.md
          echo "4. **Color Contrast Analysis**: Visual accessibility testing" >> accessibility-summary.md
          echo "5. **Keyboard Navigation Testing**: Manual keyboard-only navigation" >> accessibility-summary.md
          echo "" >> accessibility-summary.md

          echo "## Recommendations" >> accessibility-summary.md
          echo "" >> accessibility-summary.md
          echo "- Regular accessibility testing in development workflow" >> accessibility-summary.md
          echo "- Manual testing with screen readers (NVDA, JAWS, VoiceOver)" >> accessibility-summary.md
          echo "- User testing with people who use assistive technologies" >> accessibility-summary.md
          echo "- Accessibility training for development team" >> accessibility-summary.md
          echo "- Implement accessibility linting in IDE and CI/CD" >> accessibility-summary.md

          cat accessibility-summary.md >> $GITHUB_STEP_SUMMARY

      - name: Upload consolidated accessibility report
        uses: actions/upload-artifact@v4
        with:
          name: accessibility-report
          path: |
            accessibility-summary.md
            accessibility-results/
