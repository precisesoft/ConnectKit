name: Security - OWASP ZAP Scan

on:
  push:
    branches: [main]
  schedule:
    - cron: "0 4 * * 1" # Weekly on Monday at 4 AM UTC
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  owasp-zap:
    name: OWASP ZAP Security Test
    runs-on: ubuntu-latest
    
    # Only run on main branch and non-dependabot
    if: github.ref == 'refs/heads/main' && github.actor != 'dependabot[bot]'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Create ZAP rules configuration
        run: |
          mkdir -p .zap
          cat > .zap/rules.tsv << 'EOF'
          10021	IGNORE	(Cookie No HttpOnly Flag)
          10023	IGNORE	(Information Disclosure - Debug Error Messages)
          10027	IGNORE	(Information Disclosure - Suspicious Comments)
          10054	IGNORE	(Cookie Without SameSite Attribute)
          10055	IGNORE	(CSP Scanner)
          10096	IGNORE	(Timestamp Disclosure)
          10098	IGNORE	(Cross-Domain Misconfiguration)
          EOF
          echo "ZAP rules configuration created"
      
      - name: Setup application environment
        run: |
          # Create test environment file
          cat > .env << 'EOF'
          NODE_ENV=test
          PORT=3001
          FRONTEND_PORT=3000
          DB_HOST=localhost
          DB_PORT=5432
          DB_USER=postgres
          DB_PASSWORD=postgres
          DB_NAME=connectkit_test
          REDIS_URL=redis://localhost:6379
          JWT_SECRET=test-jwt-secret-for-security-testing-very-long-key
          JWT_REFRESH_SECRET=test-refresh-secret-for-security-testing-very-long-key
          ENCRYPTION_KEY=test-encryption-key-32-characters
          CORS_ORIGIN=http://localhost:3000
          EOF
          echo "Environment configured for OWASP ZAP testing"
      
      - name: Start application services
        run: |
          echo "Starting application with Docker Compose..."
          
          # Start services in detached mode
          docker compose up -d
          
          echo "Waiting for services to be ready..."
          sleep 60
          
          # Check if services are running
          docker compose ps
        continue-on-error: true
      
      - name: Wait for application to be ready
        run: |
          echo "Checking application readiness..."
          
          # Wait for backend
          for i in {1..30}; do
            if curl -f http://localhost:3001/api/health 2>/dev/null; then
              echo "✅ Backend is ready"
              break
            fi
            echo "Waiting for backend... ($i/30)"
            sleep 5
          done
          
          # Wait for frontend
          for i in {1..30}; do
            if curl -f http://localhost:3000 2>/dev/null; then
              echo "✅ Frontend is ready"
              break
            fi
            echo "Waiting for frontend... ($i/30)"
            sleep 5
          done
          
          # Final check
          curl -I http://localhost:3000 || echo "Frontend may not be fully ready"
          curl -I http://localhost:3001/api/health || echo "Backend may not be fully ready"
        continue-on-error: true
      
      - name: Run OWASP ZAP Baseline Scan (Frontend)
        uses: zaproxy/action-baseline@v0.10.0
        with:
          target: "http://localhost:3000"
          rules_file_name: ".zap/rules.tsv"
          cmd_options: "-a -j -T 10 -m 5"
          allow_issue_writing: false
          artifact_name: "zap-frontend-report"
        continue-on-error: true
      
      - name: Run OWASP ZAP API Scan (Backend)
        run: |
          echo "Running OWASP ZAP API scan..."
          
          # Create a basic OpenAPI spec for the backend if it doesn't exist
          cat > openapi.json << 'EOF'
          {
            "openapi": "3.0.0",
            "info": {
              "title": "ConnectKit API",
              "version": "1.0.0"
            },
            "servers": [
              {
                "url": "http://localhost:3001/api"
              }
            ],
            "paths": {
              "/health": {
                "get": {
                  "summary": "Health check",
                  "responses": {
                    "200": {
                      "description": "Service is healthy"
                    }
                  }
                }
              },
              "/auth/login": {
                "post": {
                  "summary": "User login",
                  "requestBody": {
                    "required": true,
                    "content": {
                      "application/json": {
                        "schema": {
                          "type": "object",
                          "properties": {
                            "email": {"type": "string"},
                            "password": {"type": "string"}
                          }
                        }
                      }
                    }
                  },
                  "responses": {
                    "200": {
                      "description": "Login successful"
                    }
                  }
                }
              },
              "/contacts": {
                "get": {
                  "summary": "Get contacts",
                  "responses": {
                    "200": {
                      "description": "List of contacts"
                    }
                  }
                },
                "post": {
                  "summary": "Create contact",
                  "requestBody": {
                    "required": true,
                    "content": {
                      "application/json": {
                        "schema": {
                          "type": "object"
                        }
                      }
                    }
                  },
                  "responses": {
                    "201": {
                      "description": "Contact created"
                    }
                  }
                }
              }
            }
          }
          EOF
          
          # Run the API scan using the action
          docker run --rm \
            --network host \
            -v $(pwd):/zap/wrk:rw \
            -t ghcr.io/zaproxy/zaproxy:stable \
            zap-api-scan.py \
            -t openapi.json \
            -f openapi \
            -r zap-api-report.html \
            -w zap-api-report.md \
            -J zap-api-report.json \
            -x zap-api-report.xml \
            -T 10 \
            -l INFO \
            -d || echo "API scan completed with findings"
        continue-on-error: true
      
      - name: Parse ZAP results
        run: |
          echo "## OWASP ZAP Security Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check for report files
          if [ -f "report_html.html" ]; then
            echo "### Frontend Scan Results:" >> $GITHUB_STEP_SUMMARY
            echo "✅ Frontend baseline scan completed" >> $GITHUB_STEP_SUMMARY
            
            # Extract summary from JSON if available
            if [ -f "report_json.json" ]; then
              HIGH_COUNT=$(jq '[.site[].alerts[] | select(.riskdesc | contains("High"))] | length' report_json.json 2>/dev/null || echo "0")
              MEDIUM_COUNT=$(jq '[.site[].alerts[] | select(.riskdesc | contains("Medium"))] | length' report_json.json 2>/dev/null || echo "0")
              LOW_COUNT=$(jq '[.site[].alerts[] | select(.riskdesc | contains("Low"))] | length' report_json.json 2>/dev/null || echo "0")
              
              echo "- High Risk: $HIGH_COUNT" >> $GITHUB_STEP_SUMMARY
              echo "- Medium Risk: $MEDIUM_COUNT" >> $GITHUB_STEP_SUMMARY
              echo "- Low Risk: $LOW_COUNT" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "⚠️ Frontend scan report not generated" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -f "zap-api-report.html" ]; then
            echo "### Backend API Scan Results:" >> $GITHUB_STEP_SUMMARY
            echo "✅ API scan completed" >> $GITHUB_STEP_SUMMARY
            
            # Extract summary from JSON if available
            if [ -f "zap-api-report.json" ]; then
              API_HIGH=$(jq '[.site[].alerts[] | select(.riskdesc | contains("High"))] | length' zap-api-report.json 2>/dev/null || echo "0")
              API_MEDIUM=$(jq '[.site[].alerts[] | select(.riskdesc | contains("Medium"))] | length' zap-api-report.json 2>/dev/null || echo "0")
              API_LOW=$(jq '[.site[].alerts[] | select(.riskdesc | contains("Low"))] | length' zap-api-report.json 2>/dev/null || echo "0")
              
              echo "- High Risk: $API_HIGH" >> $GITHUB_STEP_SUMMARY
              echo "- Medium Risk: $API_MEDIUM" >> $GITHUB_STEP_SUMMARY
              echo "- Low Risk: $API_LOW" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "⚠️ API scan report not generated" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Common Security Findings:" >> $GITHUB_STEP_SUMMARY
          echo "- Missing security headers (CSP, HSTS, X-Frame-Options)" >> $GITHUB_STEP_SUMMARY
          echo "- Cookie security attributes" >> $GITHUB_STEP_SUMMARY
          echo "- Information disclosure in error messages" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "💡 Review the detailed reports in artifacts for remediation guidance" >> $GITHUB_STEP_SUMMARY
        continue-on-error: true
      
      - name: Upload ZAP results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: owasp-zap-results-${{ github.run_number }}
          path: |
            report_html.html
            report_json.json
            report_md.md
            report_xml.xml
            zap-api-report.*
            .zap/
          retention-days: 30
      
      - name: Stop services
        if: always()
        run: |
          echo "Stopping application services..."
          docker compose down -v || true
          
          # Ensure cleanup
          docker container prune -f || true
          sleep 5
          
          echo "Services stopped and cleaned up"