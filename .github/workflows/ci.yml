name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  NODE_VERSION: "18"
  DOCKER_BUILDKIT: 1

jobs:
  # Security scanning job
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"

      # NOTE: SARIF upload requires GitHub Advanced Security - commented out
      # - name: Upload Trivy results to GitHub Security
      #   uses: github/codeql-action/upload-sarif@v3
      #   with:
      #     sarif_file: "trivy-results.sarif"

  # Backend testing job
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: connectkit_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: |
          npm ci
          npm ci --workspace=backend

      - name: Run backend linting
        working-directory: ./backend
        run: npm run lint || true

      - name: Run backend type checking
        working-directory: ./backend
        run: npm run type-check

      - name: Run backend tests with coverage
        working-directory: ./backend
        env:
          NODE_ENV: test
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USER: test
          DB_PASSWORD: test
          DB_NAME: connectkit_test
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          JWT_SECRET: test-secret-must-be-at-least-32-chars-long
          JWT_REFRESH_SECRET: test-refresh-secret-must-be-at-least-32-chars
          ENCRYPTION_KEY: test-encryption-key-32-characters!!
        run: npm test -- --coverageReporters=lcov

      - name: Upload backend coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./backend/coverage/lcov.info
          flags: backend
          name: backend-coverage
          token: ${{ secrets.CODECOV_TOKEN }}
        continue-on-error: true

  # Frontend testing job
  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Clean npm cache and install dependencies
        run: |
          npm cache clean --force
          rm -rf node_modules package-lock.json
          rm -rf frontend/node_modules frontend/package-lock.json
          npm install
          npm ci --workspace=frontend

      - name: Debug environment and dependencies
        run: |
          echo "Node version: $(node --version)"
          echo "npm version: $(npm --version)"
          echo "Current directory: $(pwd)"
          ls -la frontend/node_modules/.bin/ | head -10 || echo "No .bin directory found"

      - name: Run frontend linting
        working-directory: ./frontend
        run: npm run lint || true

      - name: Run frontend type checking
        working-directory: ./frontend
        run: npm run type-check || true

      - name: Run frontend tests with verbose output
        working-directory: ./frontend
        run: |
          echo "Running tests with verbose output..."
          npm run test:unit

      - name: Upload frontend coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage
          token: ${{ secrets.CODECOV_TOKEN }}
        continue-on-error: true

  # Build job
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: |
          npm ci
          npm ci --workspace=backend
          npm ci --workspace=frontend

      - name: Build backend
        working-directory: ./backend
        run: npm run build

      - name: Build frontend
        working-directory: ./frontend
        run: npm run build

      - name: Upload backend build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-build
          path: backend/dist/

      - name: Upload frontend build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist/

  # Docker build job
  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [build, security]
    if: github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build backend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./docker/backend/Dockerfile
          push: false
          tags: connectkit-backend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          target: production

      - name: Build frontend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./docker/frontend/Dockerfile
          push: false
          tags: connectkit-frontend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          target: production

  # E2E testing job
  e2e-test:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Create environment file
        run: |
          cp .env.example .env
          # Override with test-specific values
          echo "DB_USER=test" >> .env
          echo "DB_PASSWORD=test" >> .env
          echo "DB_NAME=connectkit_test" >> .env
          echo "JWT_SECRET=test-secret-must-be-at-least-32-chars-long" >> .env
          echo "JWT_REFRESH_SECRET=test-refresh-secret-must-be-at-least-32-chars" >> .env
          echo "ENCRYPTION_KEY=test-encryption-key-32-characters!!" >> .env

      - name: Start services with Docker Compose
        run: |
          docker compose up -d
          echo "Waiting for services to be healthy..."

      - name: Wait for services to be ready
        run: |
          timeout=300
          interval=5
          elapsed=0

          while [ $elapsed -lt $timeout ]; do
            echo "Checking service health... (${elapsed}s elapsed)"
            
            # Check backend health
            if curl -f -s http://localhost:3001/api/health > /dev/null 2>&1; then
              echo "✅ Backend service is healthy"
              backend_ready=true
            else
              echo "⏳ Backend service not ready yet"
              backend_ready=false
            fi
            
            # Check frontend availability
            if curl -f -s http://localhost:3000 > /dev/null 2>&1; then
              echo "✅ Frontend service is healthy"
              frontend_ready=true
            else
              echo "⏳ Frontend service not ready yet"
              frontend_ready=false
            fi
            
            if [ "$backend_ready" = true ] && [ "$frontend_ready" = true ]; then
              echo "✅ All services are ready!"
              exit 0
            fi
            
            sleep $interval
            elapsed=$((elapsed + interval))
          done

          echo "❌ Services failed to start within ${timeout}s"
          echo "Checking service logs..."
          docker compose logs --tail=50
          exit 1

      - name: Install dependencies and Playwright
        run: |
          npm ci
          npm ci --workspace=frontend
          cd frontend && npx playwright install --with-deps

      - name: Run E2E tests
        working-directory: ./frontend
        run: npm run test:e2e

      - name: Upload E2E test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: frontend/playwright-report/
          retention-days: 7

      - name: Upload E2E test videos
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-videos
          path: frontend/test-results/
          retention-days: 7

      - name: Stop services and cleanup
        if: always()
        run: |
          docker compose down -v
          docker system prune -f

  # Summary job
  summary:
    name: Pipeline Summary
    runs-on: ubuntu-latest
    needs:
      [security, backend-test, frontend-test, build, docker-build, e2e-test]
    if: always()
    steps:
      - name: Generate pipeline summary
        run: |
          echo "## 🚀 CI/CD Pipeline Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Security check
          if [ "${{ needs.security.result }}" == "success" ]; then
            echo "✅ **Security Scan**: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Security Scan**: Failed or skipped" >> $GITHUB_STEP_SUMMARY
          fi

          # Backend tests
          if [ "${{ needs.backend-test.result }}" == "success" ]; then
            echo "✅ **Backend Tests**: All tests passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Backend Tests**: Some tests failed" >> $GITHUB_STEP_SUMMARY
          fi

          # Frontend tests
          if [ "${{ needs.frontend-test.result }}" == "success" ]; then
            echo "✅ **Frontend Tests**: All tests passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Frontend Tests**: Some tests failed" >> $GITHUB_STEP_SUMMARY
          fi

          # Build
          if [ "${{ needs.build.result }}" == "success" ]; then
            echo "✅ **Build**: Application built successfully" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Build**: Build failed" >> $GITHUB_STEP_SUMMARY
          fi

          # Docker build
          if [ "${{ needs.docker-build.result }}" == "success" ]; then
            echo "✅ **Docker Build**: Images built successfully" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.docker-build.result }}" == "skipped" ]; then
            echo "⏭️ **Docker Build**: Skipped (not a push event)" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Docker Build**: Failed" >> $GITHUB_STEP_SUMMARY
          fi

          # E2E tests
          if [ "${{ needs.e2e-test.result }}" == "success" ]; then
            echo "✅ **E2E Tests**: All tests passed" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.e2e-test.result }}" == "skipped" ]; then
            echo "⏭️ **E2E Tests**: Skipped (not a pull request)" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **E2E Tests**: Some tests failed" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Quick Stats" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
