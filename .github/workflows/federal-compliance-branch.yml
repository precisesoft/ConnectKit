name: Federal Compliance Branch Testing

on:
  push:
    branches:
      - feat/federal-compliance-testing
  pull_request:
    branches:
      - feat/federal-compliance-testing

env:
  NODE_VERSION: "18"
  COMPLIANCE_MODE: "federal"

jobs:
  # Quick SBOM validation for branch testing
  sbom-validation:
    name: SBOM Generation & Validation
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: |
          npm ci
          npm ci --workspace=backend --omit=dev
          npm ci --workspace=frontend --omit=dev

      - name: Install SBOM tools
        run: |
          # Install Syft for SBOM generation
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin

          # Install Grype for vulnerability scanning  
          curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin

          # Verify installation
          syft version
          grype version

      - name: Verify SBOM configuration
        run: |
          echo "## SBOM Configuration Verification" >> $GITHUB_STEP_SUMMARY
          
          # Check for SBOM configuration directory
          if [ ! -d ".sbom" ]; then
            echo "❌ **SBOM configuration directory missing**" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

          # Verify required configuration files
          CONFIG_FILES=(".sbom/sbom-config.json" ".sbom/allowlist.json" ".sbom/license-policy.json")
          for config_file in "${CONFIG_FILES[@]}"; do
            if [ ! -f "$config_file" ]; then
              echo "❌ **Missing configuration file**: $config_file" >> $GITHUB_STEP_SUMMARY
              exit 1
            else
              echo "✅ **Found**: $config_file" >> $GITHUB_STEP_SUMMARY
            fi
          done

          # Ensure output directory exists
          mkdir -p sbom-output
          
          echo "✅ **All SBOM configuration files verified**" >> $GITHUB_STEP_SUMMARY

      - name: Generate SBOM
        run: |
          echo "## SBOM Generation" >> $GITHUB_STEP_SUMMARY
          
          echo "🔍 Generating Software Bill of Materials..."
          npm run sbom:generate

          # Verify SBOM files were generated
          SBOM_FILES=("sbom-output/sbom-cyclonedx.json" "sbom-output/sbom-spdx.json" "sbom-output/sbom-syft.json")
          for sbom_file in "${SBOM_FILES[@]}"; do
            if [ -f "$sbom_file" ]; then
              SIZE=$(stat -c%s "$sbom_file" 2>/dev/null || stat -f%z "$sbom_file")
              echo "✅ **Generated**: $sbom_file (${SIZE} bytes)" >> $GITHUB_STEP_SUMMARY
            else
              echo "❌ **Missing**: $sbom_file" >> $GITHUB_STEP_SUMMARY
            fi
          done

      - name: Run vulnerability analysis
        run: |
          echo "## Vulnerability Analysis" >> $GITHUB_STEP_SUMMARY
          
          echo "🔐 Running vulnerability analysis..."
          SEVERITY_THRESHOLD="medium" npm run sbom:check || echo "Vulnerability check completed with findings"

          # Check if vulnerability results exist
          if [ -f "sbom-output/vulnerabilities-filtered.json" ]; then
            # Extract vulnerability counts
            CRITICAL=$(jq -r '.summary.critical // 0' sbom-output/vulnerabilities-filtered.json)
            HIGH=$(jq -r '.summary.high // 0' sbom-output/vulnerabilities-filtered.json)
            MEDIUM=$(jq -r '.summary.medium // 0' sbom-output/vulnerabilities-filtered.json)
            LOW=$(jq -r '.summary.low // 0' sbom-output/vulnerabilities-filtered.json)
            
            echo "### Vulnerability Summary" >> $GITHUB_STEP_SUMMARY
            echo "- **Critical**: $CRITICAL" >> $GITHUB_STEP_SUMMARY
            echo "- **High**: $HIGH" >> $GITHUB_STEP_SUMMARY
            echo "- **Medium**: $MEDIUM" >> $GITHUB_STEP_SUMMARY
            echo "- **Low**: $LOW" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **No vulnerability results found**" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Validate compliance
        run: |
          echo "## Compliance Validation" >> $GITHUB_STEP_SUMMARY
          
          # Check if compliance report was generated
          if [ -f "sbom-output/compliance-report.json" ]; then
            echo "✅ **Compliance report generated**" >> $GITHUB_STEP_SUMMARY
            
            # Extract compliance status
            NTIA_COMPLIANT=$(jq -r '.ntia_minimum_elements.compliant' sbom-output/compliance-report.json)
            EO_COMPLIANT=$(jq -r '.executive_order_14028.compliant' sbom-output/compliance-report.json)
            LICENSE_COMPLIANT=$(jq -r '.license_compliance.compliant' sbom-output/compliance-report.json)
            
            echo "- **NTIA Compliance**: $([ "$NTIA_COMPLIANT" = "true" ] && echo "✅ Passed" || echo "❌ Failed")" >> $GITHUB_STEP_SUMMARY
            echo "- **Executive Order 14028**: $([ "$EO_COMPLIANT" = "true" ] && echo "✅ Passed" || echo "❌ Failed")" >> $GITHUB_STEP_SUMMARY
            echo "- **License Compliance**: $([ "$LICENSE_COMPLIANT" = "true" ] && echo "✅ Passed" || echo "❌ Failed")" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Compliance report not generated**" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Generate test summary
        run: |
          echo "## Test Summary" >> $GITHUB_STEP_SUMMARY
          
          # Count generated files
          SBOM_COUNT=$(ls -1 sbom-output/*.json 2>/dev/null | wc -l)
          echo "- **SBOM files generated**: $SBOM_COUNT" >> $GITHUB_STEP_SUMMARY
          
          # List all generated artifacts
          echo "### Generated Artifacts" >> $GITHUB_STEP_SUMMARY
          if [ -d "sbom-output" ]; then
            for file in sbom-output/*; do
              if [ -f "$file" ]; then
                FILENAME=$(basename "$file")
                SIZE=$(stat -c%s "$file" 2>/dev/null || stat -f%z "$file")
                echo "- **$FILENAME**: ${SIZE} bytes" >> $GITHUB_STEP_SUMMARY
              fi
            done
          fi

      - name: Upload SBOM artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: sbom-branch-test-${{ github.run_number }}
          path: |
            sbom-output/
            .sbom/
          retention-days: 7

  # Quick security scan
  security-validation:
    name: Security Validation
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Semgrep
        run: |
          python3 -m pip install semgrep

      - name: Run quick security scan
        run: |
          echo "## Security Scan Results" >> $GITHUB_STEP_SUMMARY
          
          # Run focused security scan
          semgrep --config=p/security-audit --json --output=security-results.json . || true
          semgrep --config=p/secrets --json --output=secrets-results.json . || true

          # Check for critical security issues
          if [ -f "security-results.json" ]; then
            CRITICAL_ISSUES=$(jq '[.results[] | select(.extra.severity == "ERROR")] | length' security-results.json)
            WARNING_ISSUES=$(jq '[.results[] | select(.extra.severity == "WARNING")] | length' security-results.json)
            
            echo "- **Critical Issues**: $CRITICAL_ISSUES" >> $GITHUB_STEP_SUMMARY
            echo "- **Warning Issues**: $WARNING_ISSUES" >> $GITHUB_STEP_SUMMARY
            
            if [ "$CRITICAL_ISSUES" -gt 0 ]; then
              echo "❌ **Critical security issues found**" >> $GITHUB_STEP_SUMMARY
              exit 1
            fi
          fi

          # Check for secrets
          if [ -f "secrets-results.json" ]; then
            SECRETS_COUNT=$(jq '.results | length' secrets-results.json)
            echo "- **Potential Secrets**: $SECRETS_COUNT" >> $GITHUB_STEP_SUMMARY
            
            if [ "$SECRETS_COUNT" -gt 0 ]; then
              echo "❌ **Potential secrets detected**" >> $GITHUB_STEP_SUMMARY
              exit 1
            fi
          fi

          echo "✅ **Security validation passed**" >> $GITHUB_STEP_SUMMARY

      - name: Upload security results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-scan-${{ github.run_number }}
          path: |
            security-results.json
            secrets-results.json

  # Summarize results
  branch-test-summary:
    name: Branch Test Summary
    runs-on: ubuntu-latest
    needs: [sbom-validation, security-validation]
    if: always()
    
    steps:
      - name: Generate test summary
        run: |
          echo "# Federal Compliance Branch Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Branch**: \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Commit**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp**: $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## Job Results" >> $GITHUB_STEP_SUMMARY
          echo "- **SBOM Validation**: ${{ needs.sbom-validation.result == 'success' && '✅ Passed' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Security Validation**: ${{ needs.security-validation.result == 'success' && '✅ Passed' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Set overall status
          if [ "${{ needs.sbom-validation.result }}" == "success" ] && [ "${{ needs.security-validation.result }}" == "success" ]; then
            echo "## ✅ Overall Status: PASSED" >> $GITHUB_STEP_SUMMARY
            echo "All federal compliance tests passed successfully." >> $GITHUB_STEP_SUMMARY
          else
            echo "## ❌ Overall Status: FAILED" >> $GITHUB_STEP_SUMMARY
            echo "One or more compliance tests failed. Review the job logs for details." >> $GITHUB_STEP_SUMMARY
          fi