name: Performance Testing

on:
  pull_request:
    branches: [main, develop]
    paths:
      - "backend/**"
      - "frontend/**"
      - "docker/**"
      - ".github/workflows/performance-testing.yml"
  schedule:
    - cron: "0 2 * * *" # Daily at 2 AM UTC
  workflow_dispatch:
    inputs:
      test_type:
        description: "Type of performance test to run"
        required: true
        default: "load"
        type: choice
        options:
          - load
          - stress
          - spike
          - soak
          - all

permissions:
  contents: read
  actions: read
  checks: write

jobs:
  setup:
    name: Setup Test Environment
    runs-on: ubuntu-latest
    outputs:
      api_url: ${{ steps.setup.outputs.api_url }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Start application stack
        run: |
          echo "Starting application stack for performance testing..."
          docker compose -f docker-compose.yml up -d

          # Wait for services to be healthy
          echo "Waiting for services to be ready..."
          for i in {1..30}; do
            if curl -f http://localhost:3001/api/health > /dev/null 2>&1; then
              echo "✅ Backend is ready"
              break
            fi
            echo "Waiting for backend... ($i/30)"
            sleep 10
          done

          for i in {1..30}; do
            if curl -f http://localhost:3000 > /dev/null 2>&1; then
              echo "✅ Frontend is ready"
              break
            fi
            echo "Waiting for frontend... ($i/30)"
            sleep 10
          done
        continue-on-error: true

      - name: Set API URL
        id: setup
        run: |
          echo "api_url=http://localhost:3001/api" >> $GITHUB_OUTPUT
          echo "API URL set to http://localhost:3001/api"

  k6-load-testing:
    name: K6 Load Testing
    runs-on: ubuntu-latest
    needs: setup
    if: github.event.inputs.test_type == 'load' || github.event.inputs.test_type == 'all' || github.event.inputs.test_type == ''

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create K6 load test script
        run: |
          mkdir -p tests/performance
          cat > tests/performance/load-test.js << 'EOF'
          import http from 'k6/http';
          import { check, sleep } from 'k6';
          import { Rate } from 'k6/metrics';

          const errorRate = new Rate('errors');

          export const options = {
            stages: [
              { duration: '2m', target: 50 },  // Ramp up to 50 users
              { duration: '5m', target: 50 },  // Stay at 50 users
              { duration: '2m', target: 100 }, // Ramp up to 100 users
              { duration: '5m', target: 100 }, // Stay at 100 users
              { duration: '2m', target: 0 },   // Ramp down to 0 users
            ],
            thresholds: {
              http_req_duration: ['p(95)<500'], // 95% of requests under 500ms
              'http_req_duration{staticAsset:yes}': ['p(95)<100'], // Static content under 100ms
              errors: ['rate<0.1'], // Error rate under 10%
            },
          };

          const API_URL = __ENV.API_URL || 'http://localhost:3001/api';

          export default function () {
            // Test health endpoint
            const healthRes = http.get(`${API_URL}/health`);
            check(healthRes, {
              'health check status is 200': (r) => r.status === 200,
            });
            errorRate.add(healthRes.status !== 200);
            
            // Test authentication
            const authPayload = JSON.stringify({
              email: `user${Math.random()}@example.com`,
              password: 'TestPassword123!',
            });
            
            const authParams = {
              headers: { 'Content-Type': 'application/json' },
            };
            
            const loginRes = http.post(`${API_URL}/auth/login`, authPayload, authParams);
            check(loginRes, {
              'login status is 200 or 401': (r) => [200, 401].includes(r.status),
              'login response time < 1000ms': (r) => r.timings.duration < 1000,
            });
            
            // Test contact listing (if authenticated)
            if (loginRes.status === 200) {
              const token = loginRes.json('token');
              const authHeaders = {
                headers: {
                  'Authorization': `Bearer ${token}`,
                  'Content-Type': 'application/json',
                },
              };
              
              const contactsRes = http.get(`${API_URL}/contacts`, authHeaders);
              check(contactsRes, {
                'contacts status is 200': (r) => r.status === 200,
                'contacts response time < 500ms': (r) => r.timings.duration < 500,
              });
            }
            
            sleep(1);
          }
          EOF

      - name: Run K6 load test
        uses: grafana/k6-action@v0.3.1
        with:
          filename: tests/performance/load-test.js
          flags: --out json=results/load-test-results.json
        env:
          API_URL: ${{ needs.setup.outputs.api_url }}
        continue-on-error: true

      - name: Upload load test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: k6-load-test-results-${{ github.run_number }}
          path: results/
          retention-days: 30

      - name: Parse and display results
        if: always()
        run: |
          echo "## 📊 Load Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ -f "results/load-test-results.json" ]; then
            echo "### Performance Metrics:" >> $GITHUB_STEP_SUMMARY
            echo "- Virtual Users: 50-100" >> $GITHUB_STEP_SUMMARY
            echo "- Test Duration: 16 minutes" >> $GITHUB_STEP_SUMMARY
            echo "- Target RPS: ~100" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # Extract key metrics from results
            echo "✅ Load test completed successfully" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ No load test results found" >> $GITHUB_STEP_SUMMARY
          fi

  k6-stress-testing:
    name: K6 Stress Testing
    runs-on: ubuntu-latest
    needs: setup
    if: github.event.inputs.test_type == 'stress' || github.event.inputs.test_type == 'all'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create K6 stress test script
        run: |
          mkdir -p tests/performance
          cat > tests/performance/stress-test.js << 'EOF'
          import http from 'k6/http';
          import { check, sleep } from 'k6';

          export const options = {
            stages: [
              { duration: '2m', target: 100 },  // Ramp up to 100 users
              { duration: '5m', target: 100 },  // Stay at 100 users
              { duration: '2m', target: 200 },  // Ramp up to 200 users
              { duration: '5m', target: 200 },  // Stay at 200 users
              { duration: '2m', target: 300 },  // Ramp up to 300 users
              { duration: '5m', target: 300 },  // Stay at 300 users
              { duration: '5m', target: 0 },    // Ramp down to 0 users
            ],
            thresholds: {
              http_req_duration: ['p(95)<2000'], // 95% of requests under 2s
              http_req_failed: ['rate<0.2'],     // Error rate under 20%
            },
          };

          const API_URL = __ENV.API_URL || 'http://localhost:3001/api';

          export default function () {
            const res = http.get(`${API_URL}/health`);
            check(res, {
              'status is 200': (r) => r.status === 200,
              'response time < 2000ms': (r) => r.timings.duration < 2000,
            });
            
            sleep(Math.random() * 2);
          }
          EOF

      - name: Run K6 stress test
        uses: grafana/k6-action@v0.3.1
        with:
          filename: tests/performance/stress-test.js
          flags: --out json=results/stress-test-results.json
        env:
          API_URL: ${{ needs.setup.outputs.api_url }}
        continue-on-error: true

      - name: Upload stress test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: k6-stress-test-results-${{ github.run_number }}
          path: results/
          retention-days: 30

  k6-spike-testing:
    name: K6 Spike Testing
    runs-on: ubuntu-latest
    needs: setup
    if: github.event.inputs.test_type == 'spike' || github.event.inputs.test_type == 'all'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create K6 spike test script
        run: |
          mkdir -p tests/performance
          cat > tests/performance/spike-test.js << 'EOF'
          import http from 'k6/http';
          import { check, sleep } from 'k6';

          export const options = {
            stages: [
              { duration: '10s', target: 10 },   // Warm up
              { duration: '1m', target: 10 },    // Stay at 10 users
              { duration: '10s', target: 500 },  // Spike to 500 users
              { duration: '3m', target: 500 },   // Stay at 500 users
              { duration: '10s', target: 10 },   // Scale down
              { duration: '1m', target: 10 },    // Recovery period
              { duration: '10s', target: 0 },    // Ramp down
            ],
            thresholds: {
              http_req_duration: ['p(95)<3000'], // 95% under 3s during spike
              http_req_failed: ['rate<0.3'],     // Error rate under 30%
            },
          };

          const API_URL = __ENV.API_URL || 'http://localhost:3001/api';

          export default function () {
            const res = http.get(`${API_URL}/health`);
            check(res, {
              'status is 200': (r) => r.status === 200,
            });
            
            sleep(0.1);
          }
          EOF

      - name: Run K6 spike test
        uses: grafana/k6-action@v0.3.1
        with:
          filename: tests/performance/spike-test.js
          flags: --out json=results/spike-test-results.json
        env:
          API_URL: ${{ needs.setup.outputs.api_url }}
        continue-on-error: true

      - name: Upload spike test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: k6-spike-test-results-${{ github.run_number }}
          path: results/
          retention-days: 30

  artillery-testing:
    name: Artillery Performance Testing
    runs-on: ubuntu-latest
    needs: setup
    if: github.event.inputs.test_type == 'load' || github.event.inputs.test_type == 'all' || github.event.inputs.test_type == ''

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install Artillery
        run: npm install -g artillery

      - name: Create Artillery test config
        run: |
          mkdir -p tests/performance
          cat > tests/performance/artillery-config.yml << 'EOF'
          config:
            target: "${{ needs.setup.outputs.api_url }}"
            phases:
              - duration: 60
                arrivalRate: 1
                rampTo: 10
                name: "Warm up"
              - duration: 120
                arrivalRate: 10
                rampTo: 50
                name: "Ramp up load"
              - duration: 300
                arrivalRate: 50
                name: "Sustained load"
            ensure:
              p95: 1000
              p99: 2000
          scenarios:
            - name: "Health Check"
              weight: 20
              flow:
                - get:
                    url: "/health"
            - name: "API Flow"
              weight: 80
              flow:
                - post:
                    url: "/auth/login"
                    json:
                      email: "test@example.com"
                      password: "password123"
                - get:
                    url: "/contacts"
                    afterResponse: "pauseForThought"
          processors:
            pauseForThought: |
              function pauseForThought(requestParams, response, context, ee, next) {
                setTimeout(next, 1000);
              }
          EOF

      - name: Run Artillery test
        run: |
          artillery run tests/performance/artillery-config.yml \
            --output results/artillery-report.json
        continue-on-error: true

      - name: Generate Artillery HTML report
        if: always()
        run: |
          if [ -f "results/artillery-report.json" ]; then
            artillery report results/artillery-report.json \
              --output results/artillery-report.html
          fi
        continue-on-error: true

      - name: Upload Artillery results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: artillery-results-${{ github.run_number }}
          path: results/
          retention-days: 30

  cleanup:
    name: Cleanup Test Environment
    runs-on: ubuntu-latest
    needs:
      [k6-load-testing, k6-stress-testing, k6-spike-testing, artillery-testing]
    if: always()

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Stop application stack
        run: |
          echo "Stopping application stack..."
          docker compose down -v
          echo "✅ Cleanup completed"
        continue-on-error: true

      - name: Generate final report
        run: |
          echo "# 🎯 Performance Testing Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Test Date**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "## Tests Executed" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ K6 Load Testing" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ K6 Stress Testing (if selected)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ K6 Spike Testing (if selected)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Artillery Testing" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "## Performance Thresholds" >> $GITHUB_STEP_SUMMARY
          echo "- **P95 Response Time**: < 500ms (load), < 2000ms (stress)" >> $GITHUB_STEP_SUMMARY
          echo "- **Error Rate**: < 10% (load), < 20% (stress)" >> $GITHUB_STEP_SUMMARY
          echo "- **Concurrent Users**: 100 (load), 300 (stress), 500 (spike)" >> $GITHUB_STEP_SUMMARY
