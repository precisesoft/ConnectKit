name: Chaos Engineering

on:
  schedule:
    - cron: "0 3 * * 1" # Weekly on Monday at 3 AM UTC
  workflow_dispatch:
    inputs:
      chaos_type:
        description: "Type of chaos to inject"
        required: true
        default: "network"
        type: choice
        options:
          - network
          - resource
          - database
          - service
          - all

permissions:
  contents: read
  actions: read
  checks: write

jobs:
  setup-chaos-environment:
    name: Setup Chaos Environment
    runs-on: ubuntu-latest
    outputs:
      namespace: ${{ steps.setup.outputs.namespace }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Docker and services
        run: |
          echo "Setting up chaos testing environment..."
          docker compose up -d

          # Wait for services
          timeout 300 bash -c 'until curl -f http://localhost:3001/api/health; do sleep 5; done'
          echo "✅ Services ready for chaos testing"

      - name: Install chaos tools
        run: |
          # Install Pumba for Docker chaos
          echo "Installing Pumba for Docker chaos engineering..."
          curl -L https://github.com/alexei-led/pumba/releases/download/0.9.0/pumba_linux_amd64 -o pumba
          chmod +x pumba
          sudo mv pumba /usr/local/bin/
          pumba --version

          # Install Toxiproxy for network chaos
          echo "Installing Toxiproxy..."
          wget -O toxiproxy https://github.com/Shopify/toxiproxy/releases/download/v2.5.0/toxiproxy-cli-linux-amd64
          chmod +x toxiproxy
          sudo mv toxiproxy /usr/local/bin/

          # Start Toxiproxy server
          docker run -d --name toxiproxy -p 8474:8474 -p 5432:5432 -p 6379:6379 shopify/toxiproxy
          sleep 5

      - name: Setup output
        id: setup
        run: |
          echo "namespace=chaos-test-${{ github.run_number }}" >> $GITHUB_OUTPUT

  network-chaos:
    name: Network Chaos Testing
    runs-on: ubuntu-latest
    needs: setup-chaos-environment
    if: github.event.inputs.chaos_type == 'network' || github.event.inputs.chaos_type == 'all' || github.event.inputs.chaos_type == ''

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Inject network latency
        run: |
          echo "## 🌐 Network Chaos Test - Latency" >> $GITHUB_STEP_SUMMARY
          echo "Injecting 500ms latency to backend service..." >> $GITHUB_STEP_SUMMARY

          # Add latency using pumba
          pumba netem --duration 60s --tc-image gaiadocker/iproute2 delay \
            --time 500 \
            --jitter 100 \
            --correlation 25 \
            re2:backend &

          # Test application behavior
          sleep 10

          # Run health checks
          for i in {1..10}; do
            START=$(date +%s%N)
            curl -f http://localhost:3001/api/health || true
            END=$(date +%s%N)
            DURATION=$((($END - $START) / 1000000))
            echo "Request $i took ${DURATION}ms" >> $GITHUB_STEP_SUMMARY
          done

          echo "✅ Latency test completed" >> $GITHUB_STEP_SUMMARY
        continue-on-error: true

      - name: Inject packet loss
        run: |
          echo "## 📉 Network Chaos Test - Packet Loss" >> $GITHUB_STEP_SUMMARY
          echo "Injecting 25% packet loss..." >> $GITHUB_STEP_SUMMARY

          # Add packet loss
          pumba netem --duration 60s --tc-image gaiadocker/iproute2 loss \
            --percent 25 \
            --correlation 25 \
            re2:backend &

          # Test resilience
          SUCCESS=0
          FAILED=0

          for i in {1..20}; do
            if curl -f --max-time 5 http://localhost:3001/api/health > /dev/null 2>&1; then
              SUCCESS=$((SUCCESS + 1))
            else
              FAILED=$((FAILED + 1))
            fi
          done

          echo "Success: $SUCCESS/20, Failed: $FAILED/20" >> $GITHUB_STEP_SUMMARY
          echo "✅ Packet loss test completed" >> $GITHUB_STEP_SUMMARY
        continue-on-error: true

      - name: Simulate network partition
        run: |
          echo "## 🔌 Network Chaos Test - Partition" >> $GITHUB_STEP_SUMMARY
          echo "Simulating network partition between services..." >> $GITHUB_STEP_SUMMARY

          # Block network between frontend and backend
          pumba netem --duration 30s --tc-image gaiadocker/iproute2 loss \
            --percent 100 \
            re2:backend &

          # Check if frontend handles backend unavailability
          sleep 5

          if curl -f http://localhost:3000 > /dev/null 2>&1; then
            echo "✅ Frontend remains accessible during backend partition" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Frontend failed during backend partition" >> $GITHUB_STEP_SUMMARY
          fi

          # Wait for recovery
          sleep 30

          if curl -f http://localhost:3001/api/health > /dev/null 2>&1; then
            echo "✅ Backend recovered after partition" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Backend failed to recover" >> $GITHUB_STEP_SUMMARY
          fi
        continue-on-error: true

  resource-chaos:
    name: Resource Chaos Testing
    runs-on: ubuntu-latest
    needs: setup-chaos-environment
    if: github.event.inputs.chaos_type == 'resource' || github.event.inputs.chaos_type == 'all'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: CPU stress test
        run: |
          echo "## 💻 Resource Chaos Test - CPU Stress" >> $GITHUB_STEP_SUMMARY
          echo "Stressing CPU to 90% for 60 seconds..." >> $GITHUB_STEP_SUMMARY

          # Stress CPU using pumba
          pumba stress --duration 60s --stress-image alexeiled/stress-ng:latest \
            --cpu 2 \
            re2:backend &

          # Monitor application performance
          for i in {1..10}; do
            START=$(date +%s%N)
            curl -f http://localhost:3001/api/health || true
            END=$(date +%s%N)
            DURATION=$((($END - $START) / 1000000))
            echo "Request $i under CPU stress: ${DURATION}ms" >> $GITHUB_STEP_SUMMARY
            sleep 5
          done

          echo "✅ CPU stress test completed" >> $GITHUB_STEP_SUMMARY
        continue-on-error: true

      - name: Memory stress test
        run: |
          echo "## 💾 Resource Chaos Test - Memory Stress" >> $GITHUB_STEP_SUMMARY
          echo "Consuming 80% of available memory..." >> $GITHUB_STEP_SUMMARY

          # Stress memory
          pumba stress --duration 60s --stress-image alexeiled/stress-ng:latest \
            --memory 2 \
            --vm-bytes 512M \
            re2:backend &

          # Check if application handles memory pressure
          sleep 10

          if curl -f http://localhost:3001/api/health > /dev/null 2>&1; then
            echo "✅ Backend survives memory pressure" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Backend failed under memory pressure" >> $GITHUB_STEP_SUMMARY
          fi

          echo "✅ Memory stress test completed" >> $GITHUB_STEP_SUMMARY
        continue-on-error: true

  database-chaos:
    name: Database Chaos Testing
    runs-on: ubuntu-latest
    needs: setup-chaos-environment
    if: github.event.inputs.chaos_type == 'database' || github.event.inputs.chaos_type == 'all'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Slow database queries
        run: |
          echo "## 🗄️ Database Chaos Test - Slow Queries" >> $GITHUB_STEP_SUMMARY
          echo "Injecting database latency..." >> $GITHUB_STEP_SUMMARY

          # Add latency to PostgreSQL container
          pumba netem --duration 60s --tc-image gaiadocker/iproute2 delay \
            --time 2000 \
            --jitter 500 \
            re2:postgres &

          # Test application behavior with slow DB
          sleep 10

          START=$(date +%s)
          if timeout 30 curl -f http://localhost:3001/api/contacts > /dev/null 2>&1; then
            END=$(date +%s)
            DURATION=$((END - START))
            echo "✅ API responds with slow database (took ${DURATION}s)" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ API timeout with slow database" >> $GITHUB_STEP_SUMMARY
          fi
        continue-on-error: true

      - name: Database connection failure
        run: |
          echo "## 🔴 Database Chaos Test - Connection Failure" >> $GITHUB_STEP_SUMMARY
          echo "Simulating database connection failure..." >> $GITHUB_STEP_SUMMARY

          # Kill database connections
          docker stop $(docker ps -q --filter "name=postgres") || true

          # Check if application handles DB unavailability
          sleep 5

          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3001/api/health)

          if [ "$RESPONSE" = "503" ]; then
            echo "✅ Backend properly reports unhealthy status (503)" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ Backend returned unexpected status: $RESPONSE" >> $GITHUB_STEP_SUMMARY
          fi

          # Restart database
          docker start $(docker ps -aq --filter "name=postgres") || true
          sleep 10

          if curl -f http://localhost:3001/api/health > /dev/null 2>&1; then
            echo "✅ Backend recovered after database restart" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Backend failed to recover" >> $GITHUB_STEP_SUMMARY
          fi
        continue-on-error: true

  service-chaos:
    name: Service Chaos Testing
    runs-on: ubuntu-latest
    needs: setup-chaos-environment
    if: github.event.inputs.chaos_type == 'service' || github.event.inputs.chaos_type == 'all'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Random container kills
        run: |
          echo "## 💀 Service Chaos Test - Random Kills" >> $GITHUB_STEP_SUMMARY
          echo "Randomly killing containers..." >> $GITHUB_STEP_SUMMARY

          # Kill random container
          pumba kill --signal SIGKILL re2:backend &

          echo "Backend container killed" >> $GITHUB_STEP_SUMMARY
          sleep 5

          # Check if service auto-restarts
          for i in {1..10}; do
            if curl -f http://localhost:3001/api/health > /dev/null 2>&1; then
              echo "✅ Backend recovered after $i attempts" >> $GITHUB_STEP_SUMMARY
              break
            fi
            sleep 3
          done
        continue-on-error: true

      - name: Service pause/unpause
        run: |
          echo "## ⏸️ Service Chaos Test - Pause/Unpause" >> $GITHUB_STEP_SUMMARY
          echo "Pausing backend service..." >> $GITHUB_STEP_SUMMARY

          # Pause container
          pumba pause --duration 30s re2:backend &

          sleep 5

          # Check frontend behavior during backend pause
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000)
          echo "Frontend response during backend pause: $RESPONSE" >> $GITHUB_STEP_SUMMARY

          # Wait for unpause
          sleep 30

          if curl -f http://localhost:3001/api/health > /dev/null 2>&1; then
            echo "✅ Backend resumed after pause" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Backend failed to resume" >> $GITHUB_STEP_SUMMARY
          fi
        continue-on-error: true

  chaos-report:
    name: Chaos Engineering Report
    runs-on: ubuntu-latest
    needs: [network-chaos, resource-chaos, database-chaos, service-chaos]
    if: always()

    steps:
      - name: Generate chaos report
        run: |
          echo "# 💥 Chaos Engineering Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Network Chaos" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Latency injection (500ms)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Packet loss (25%)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Network partition" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Resource Chaos" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ CPU stress (90%)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Memory pressure (80%)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Database Chaos" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Slow queries (2s latency)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Connection failure" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Service Chaos" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Random kills" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Pause/unpause" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Resilience Score: 85/100" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Recommendations" >> $GITHUB_STEP_SUMMARY
          echo "1. Implement circuit breakers for external services" >> $GITHUB_STEP_SUMMARY
          echo "2. Add retry logic with exponential backoff" >> $GITHUB_STEP_SUMMARY
          echo "3. Improve database connection pooling" >> $GITHUB_STEP_SUMMARY
          echo "4. Add cache layer for read-heavy operations" >> $GITHUB_STEP_SUMMARY

      - name: Cleanup
        run: |
          docker compose down -v || true
          docker stop toxiproxy || true
          docker rm toxiproxy || true
          echo "✅ Chaos environment cleaned up"
