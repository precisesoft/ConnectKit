name: Mutation Testing

on:
  pull_request:
    branches: [main, develop]
    paths:
      - "backend/**/*.ts"
      - "frontend/**/*.ts"
      - "frontend/**/*.tsx"
  schedule:
    - cron: "0 5 * * 0" # Weekly on Sunday at 5 AM UTC
  workflow_dispatch:

permissions:
  contents: read
  actions: read
  checks: write

jobs:
  backend-mutation-testing:
    name: Backend Mutation Testing (Stryker)
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: "npm"

      - name: Install backend dependencies
        run: |
          cd backend
          npm ci
          npm install --save-dev @stryker-mutator/core @stryker-mutator/typescript-checker @stryker-mutator/jest-runner

      - name: Create Stryker configuration
        run: |
          cd backend
          cat > stryker.conf.json << 'EOF'
          {
            "$schema": "./node_modules/@stryker-mutator/core/schema/stryker-schema.json",
            "packageManager": "npm",
            "reporters": ["html", "json", "clear-text", "progress"],
            "testRunner": "jest",
            "coverageAnalysis": "perTest",
            "jest": {
              "projectType": "custom",
              "configFile": "jest.config.js"
            },
            "checkers": ["typescript"],
            "tsconfigFile": "tsconfig.json",
            "mutate": [
              "src/**/*.ts",
              "!src/**/*.test.ts",
              "!src/**/*.spec.ts",
              "!src/**/index.ts",
              "!src/types/**"
            ],
            "thresholds": {
              "high": 80,
              "low": 60,
              "break": 50
            },
            "timeoutMS": 10000,
            "timeoutFactor": 1.5,
            "maxConcurrentTestRunners": 4,
            "htmlReporter": {
              "fileName": "reports/mutation/backend/index.html"
            },
            "jsonReporter": {
              "fileName": "reports/mutation/backend/report.json"
            }
          }
          EOF

      - name: Run Stryker mutation testing
        run: |
          cd backend
          npx stryker run
        continue-on-error: true

      - name: Generate mutation score badge
        if: always()
        run: |
          cd backend
          if [ -f "reports/mutation/backend/report.json" ]; then
            SCORE=$(jq '.metrics.mutationScore' reports/mutation/backend/report.json)
            echo "## üß¨ Backend Mutation Score: ${SCORE}%" >> $GITHUB_STEP_SUMMARY
            
            if (( $(echo "$SCORE > 80" | bc -l) )); then
              echo "‚úÖ Excellent mutation score" >> $GITHUB_STEP_SUMMARY
            elif (( $(echo "$SCORE > 60" | bc -l) )); then
              echo "‚ö†Ô∏è Good mutation score, room for improvement" >> $GITHUB_STEP_SUMMARY
            else
              echo "‚ùå Low mutation score, tests need improvement" >> $GITHUB_STEP_SUMMARY
            fi
            
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Mutation Testing Details" >> $GITHUB_STEP_SUMMARY
            echo "- Mutants killed: $(jq '.metrics.killed' reports/mutation/backend/report.json)" >> $GITHUB_STEP_SUMMARY
            echo "- Mutants survived: $(jq '.metrics.survived' reports/mutation/backend/report.json)" >> $GITHUB_STEP_SUMMARY
            echo "- Mutants timeout: $(jq '.metrics.timeout' reports/mutation/backend/report.json)" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload backend mutation results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: backend-mutation-results-${{ github.run_number }}
          path: backend/reports/mutation/
          retention-days: 30

  frontend-mutation-testing:
    name: Frontend Mutation Testing (Stryker)
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: "npm"

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci
          npm install --save-dev @stryker-mutator/core @stryker-mutator/typescript-checker @stryker-mutator/vitest-runner

      - name: Create Stryker configuration
        run: |
          cd frontend
          cat > stryker.conf.json << 'EOF'
          {
            "$schema": "./node_modules/@stryker-mutator/core/schema/stryker-schema.json",
            "packageManager": "npm",
            "reporters": ["html", "json", "clear-text", "progress"],
            "testRunner": "vitest",
            "coverageAnalysis": "perTest",
            "checkers": ["typescript"],
            "tsconfigFile": "tsconfig.json",
            "mutate": [
              "src/**/*.{ts,tsx}",
              "!src/**/*.test.{ts,tsx}",
              "!src/**/*.spec.{ts,tsx}",
              "!src/**/*.stories.{ts,tsx}",
              "!src/tests/**",
              "!src/types/**",
              "!src/**/*.d.ts"
            ],
            "thresholds": {
              "high": 80,
              "low": 60,
              "break": 50
            },
            "timeoutMS": 10000,
            "timeoutFactor": 1.5,
            "maxConcurrentTestRunners": 4,
            "htmlReporter": {
              "fileName": "reports/mutation/frontend/index.html"
            },
            "jsonReporter": {
              "fileName": "reports/mutation/frontend/report.json"
            }
          }
          EOF

      - name: Run Stryker mutation testing
        run: |
          cd frontend
          npx stryker run
        continue-on-error: true

      - name: Generate mutation score badge
        if: always()
        run: |
          cd frontend
          if [ -f "reports/mutation/frontend/report.json" ]; then
            SCORE=$(jq '.metrics.mutationScore' reports/mutation/frontend/report.json)
            echo "## üß¨ Frontend Mutation Score: ${SCORE}%" >> $GITHUB_STEP_SUMMARY
            
            if (( $(echo "$SCORE > 80" | bc -l) )); then
              echo "‚úÖ Excellent mutation score" >> $GITHUB_STEP_SUMMARY
            elif (( $(echo "$SCORE > 60" | bc -l) )); then
              echo "‚ö†Ô∏è Good mutation score, room for improvement" >> $GITHUB_STEP_SUMMARY
            else
              echo "‚ùå Low mutation score, tests need improvement" >> $GITHUB_STEP_SUMMARY
            fi
            
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Mutation Testing Details" >> $GITHUB_STEP_SUMMARY
            echo "- Mutants killed: $(jq '.metrics.killed' reports/mutation/frontend/report.json)" >> $GITHUB_STEP_SUMMARY
            echo "- Mutants survived: $(jq '.metrics.survived' reports/mutation/frontend/report.json)" >> $GITHUB_STEP_SUMMARY
            echo "- Mutants timeout: $(jq '.metrics.timeout' reports/mutation/frontend/report.json)" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload frontend mutation results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: frontend-mutation-results-${{ github.run_number }}
          path: frontend/reports/mutation/
          retention-days: 30

  mutation-testing-summary:
    name: Mutation Testing Summary
    runs-on: ubuntu-latest
    needs: [backend-mutation-testing, frontend-mutation-testing]
    if: always()

    steps:
      - name: Download backend results
        uses: actions/download-artifact@v4
        with:
          name: backend-mutation-results-${{ github.run_number }}
          path: backend-results/
        continue-on-error: true

      - name: Download frontend results
        uses: actions/download-artifact@v4
        with:
          name: frontend-mutation-results-${{ github.run_number }}
          path: frontend-results/
        continue-on-error: true

      - name: Generate combined report
        run: |
          echo "# üß¨ Mutation Testing Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Calculate overall score
          BACKEND_SCORE=0
          FRONTEND_SCORE=0

          if [ -f "backend-results/backend/report.json" ]; then
            BACKEND_SCORE=$(jq '.metrics.mutationScore' backend-results/backend/report.json)
          fi

          if [ -f "frontend-results/frontend/report.json" ]; then
            FRONTEND_SCORE=$(jq '.metrics.mutationScore' frontend-results/frontend/report.json)
          fi

          if [ "$BACKEND_SCORE" != "0" ] && [ "$FRONTEND_SCORE" != "0" ]; then
            OVERALL_SCORE=$(echo "($BACKEND_SCORE + $FRONTEND_SCORE) / 2" | bc)
            echo "## Overall Mutation Score: ${OVERALL_SCORE}%" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### What is Mutation Testing?" >> $GITHUB_STEP_SUMMARY
          echo "Mutation testing measures the quality of your tests by:" >> $GITHUB_STEP_SUMMARY
          echo "1. Making small changes (mutations) to your code" >> $GITHUB_STEP_SUMMARY
          echo "2. Running tests to see if they catch the mutations" >> $GITHUB_STEP_SUMMARY
          echo "3. Calculating the percentage of mutations caught" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "A higher score means your tests are better at catching bugs!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Score Interpretation" >> $GITHUB_STEP_SUMMARY
          echo "- üèÜ 80%+: Excellent test quality" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ 60-80%: Good test quality" >> $GITHUB_STEP_SUMMARY
          echo "- ‚ö†Ô∏è 40-60%: Needs improvement" >> $GITHUB_STEP_SUMMARY
          echo "- ‚ùå <40%: Poor test quality" >> $GITHUB_STEP_SUMMARY
